{"version":3,"sources":["store/actions.ts","store/index.ts","store/selectors.ts","components/CurrentUser/CurrentUser.tsx","api/todos.ts","api/users.ts","components/TodoList/TodoList.tsx","App.tsx","index.tsx"],"names":["LOAD_TODOS","LOAD_USER","SET_TITLE_FILTER","SET_STATUS_FILTER","SET_ERROR","loadUserAction","payload","type","setErrorAction","initialState","todos","titleFilter","statusFilter","user","isError","store","createStore","state","action","getTodosSelector","getTitleFilterSelector","getStatusFilterSelector","getUserSelector","getErrorSelector","CurrentUser","props","dispatch","useDispatch","useSelector","handleClearUser","a","className","id","name","email","phone","onClick","TODO_API","getTodos","fetch","response","json","USER_API","getUser","userId","TodoList","useEffect","loadTodosFromServer","todosFromServer","filter","todo","completed","title","includes","length","handleUserChange","useCallback","loadUserFromServer","userFromServer","handleTitleChange","event","newTitle","target","value","handleStatusChange","newStatus","placeholder","onChange","map","htmlFor","checked","readOnly","classNames","button","App","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6b097abb.chunk.js","sourcesContent":["export const LOAD_TODOS = 'LOAD_TODOS';\nexport const LOAD_USER = 'LOAD_USER';\nexport const SET_TITLE_FILTER = 'SET_TITLE_FILTER';\nexport const SET_STATUS_FILTER = 'SET_STATUS_FILTER';\nexport const SET_ERROR = 'SET_ERROR';\n\nexport const loadTodosAction = (payload: Todo[]) => ({\n  type: LOAD_TODOS,\n  payload,\n});\n\nexport const loadUserAction = (payload: User | null) => ({\n  type: LOAD_USER,\n  payload,\n});\n\nexport const setTitleFilterAction = (payload: string) => ({\n  type: SET_TITLE_FILTER,\n  payload,\n});\n\nexport const setStatusFilterAction = (payload: string) => ({\n  type: SET_STATUS_FILTER,\n  payload,\n});\n\nexport const setErrorAction = (payload: boolean) => ({\n  type: SET_ERROR,\n  payload,\n});\n","import { createStore } from 'redux';\nimport {\n  LOAD_TODOS,\n  LOAD_USER,\n  SET_ERROR,\n  SET_STATUS_FILTER,\n  SET_TITLE_FILTER,\n} from './actions';\n\nconst initialState: State = {\n  todos: [],\n  titleFilter: '',\n  statusFilter: 'all',\n  user: null,\n  isError: false,\n};\n\nconst reducer = (state = initialState, action: Action) => {\n  switch (action.type) {\n    case LOAD_TODOS:\n      return {\n        ...state,\n        todos: [...action.payload],\n      };\n    case SET_TITLE_FILTER:\n      return {\n        ...state,\n        titleFilter: action.payload,\n      };\n    case SET_STATUS_FILTER:\n      return {\n        ...state,\n        statusFilter: action.payload,\n      };\n    case LOAD_USER:\n      return {\n        ...state,\n        user: action.payload,\n      };\n    case SET_ERROR:\n      return {\n        ...state,\n        isError: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n\nexport const store = createStore(reducer);\n","export const getTodosSelector = (state: State) => state.todos;\nexport const getTitleFilterSelector = (state: State) => state.titleFilter;\nexport const getStatusFilterSelector = (state: State) => state.statusFilter;\nexport const getUserSelector = (state: State) => state.user;\nexport const getErrorSelector = (state: State) => state.isError;\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { loadUserAction } from '../../store/actions';\nimport { getErrorSelector } from '../../store/selectors';\n\ntype Props = {\n  user: User | null,\n};\n\nexport const CurrentUser: React.FC<Props> = (props) => {\n  const dispatch = useDispatch();\n  const { user } = props;\n  const isError = useSelector(getErrorSelector);\n\n  const handleClearUser = async () => {\n    dispatch(loadUserAction(null));\n  };\n\n  return (\n    <>\n      {!isError\n        ? (\n          <div className=\"CurrentUser\">\n            <h2 className=\"CurrentUser__title\"><span>{`Selected user: ${user?.id}`}</span></h2>\n\n            <h3 className=\"CurrentUser__name\">{user?.name}</h3>\n            <p className=\"CurrentUser__email\">{user?.email}</p>\n            <p className=\"CurrentUser__phone\">{user?.phone}</p>\n            <button\n              type=\"button\"\n              className=\"button\"\n              onClick={handleClearUser}\n            >\n              Clear User\n            </button>\n          </div>\n        )\n        : <p>User Not Found</p>}\n    </>\n  );\n};\n","const TODO_API = 'https://mate.academy/students-api/todos';\n\nexport async function getTodos(): Promise<Todo[]> {\n  const response = await fetch(TODO_API);\n\n  return response.json();\n}\n","const USER_API = 'https://mate.academy/students-api/users/';\n\nexport async function getUser(userId: number): Promise<User> {\n  const response = await fetch(`${USER_API}${userId}`);\n\n  return response.json();\n}\n","import React, { useCallback, useEffect } from 'react';\nimport classNames from 'classnames';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getTodos } from '../../api/todos';\nimport {\n  loadTodosAction,\n  loadUserAction,\n  setErrorAction,\n  setStatusFilterAction,\n  setTitleFilterAction,\n} from '../../store/actions';\nimport {\n  getTodosSelector,\n  getTitleFilterSelector,\n  getStatusFilterSelector,\n} from '../../store/selectors';\nimport './TodoList.scss';\nimport { getUser } from '../../api/users';\n\ntype Props = {\n  user: User | null,\n};\n\nexport const TodoList: React.FC<Props> = (props) => {\n  const dispatch = useDispatch();\n  const { user } = props;\n  const todos = useSelector(getTodosSelector);\n  const titleFilter = useSelector(getTitleFilterSelector);\n  const statusFilter = useSelector(getStatusFilterSelector);\n\n  useEffect(() => {\n    const loadTodosFromServer = async () => {\n      let todosFromServer = await getTodos();\n\n      switch (statusFilter) {\n        case 'completed':\n          todosFromServer = todosFromServer.filter(todo => todo.completed === true);\n          break;\n        case 'not completed':\n          todosFromServer = todosFromServer.filter(todo => todo.completed === false);\n          break;\n        default:\n      }\n\n      dispatch(loadTodosAction(todosFromServer\n        .filter(todo => todo.title.includes(titleFilter))));\n    };\n\n    loadTodosFromServer();\n  }, [todos.length, titleFilter, statusFilter]);\n\n  const handleUserChange = useCallback((userId: number) => {\n    const loadUserFromServer = async () => {\n      try {\n        const userFromServer = await getUser(userId);\n\n        dispatch(loadUserAction(userFromServer));\n        dispatch(setErrorAction(false));\n      } catch {\n        dispatch(loadUserAction(null));\n        dispatch(setErrorAction(true));\n      }\n    };\n\n    loadUserFromServer();\n  }, [user]);\n\n  const handleTitleChange = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\n    const newTitle = event.target.value;\n\n    dispatch(setTitleFilterAction(newTitle));\n  }, [titleFilter]);\n\n  const handleStatusChange = useCallback((event: React.ChangeEvent<HTMLSelectElement>) => {\n    const newStatus = event.target.value;\n\n    dispatch(setStatusFilterAction(newStatus));\n  }, [statusFilter]);\n\n  return (\n    <div className=\"TodoList\">\n      <input\n        type=\"text\"\n        placeholder=\"Title\"\n        className=\"TodoList__filter\"\n        value={titleFilter}\n        onChange={handleTitleChange}\n      />\n      <select\n        value={statusFilter}\n        onChange={handleStatusChange}\n      >\n        <option value=\"all\">Show all</option>\n        <option value=\"completed\">Show completed</option>\n        <option value=\"not completed\">Show not completed</option>\n      </select>\n      <h2>Todos:</h2>\n      <div className=\"TodoList__list-container\">\n        <ul className=\"TodoList__list\">\n          {todos.map(todo => (\n            <li\n              className={`TodoList__item TodoList__item--${todo.completed ? 'checked' : 'unchecked'}`}\n              key={todo.id}\n            >\n              <label htmlFor={`${todo.id}`}>\n                <input type=\"checkbox\" id={`${todo.id}`} checked={todo.completed} readOnly />\n                <p>{todo.title}</p>\n              </label>\n              <button\n                onClick={() => handleUserChange(todo.userId)}\n                className={\n                  classNames(\n                    'TodoList__user-button',\n                    { button: todo.userId !== user?.id },\n                    { 'TodoList__user-button--selected': todo.userId === user?.id },\n                  )\n                }\n                type=\"button\"\n              >\n                {`User ${todo.userId}`}\n              </button>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport './App.scss';\nimport { CurrentUser } from './components/CurrentUser/CurrentUser';\nimport { TodoList } from './components/TodoList/TodoList';\nimport { getUserSelector } from './store/selectors';\nimport './styles/general.scss';\n\nconst App: React.FC = () => {\n  const user = useSelector(getUserSelector);\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        <TodoList user={user} />\n      </div>\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          {user\n            ? <CurrentUser user={user} />\n            : 'No user selected'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport { store } from './store';\nimport App from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root: React.FC = () => (\n  <Provider store={store}>\n    <App />\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}