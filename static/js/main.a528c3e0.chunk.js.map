{"version":3,"sources":["store/actions.ts","store/index.ts","api/users.ts","store/selectors.ts","components/CurrentUser/CurrentUser.tsx","components/TodoList/TodoList.tsx","api/todos.ts","App.tsx","index.tsx"],"names":["LOAD_TODOS","LOAD_USER","SET_USER","SET_TITLE_FILTER","SET_STATUS_FILTER","SET_ERROR","setUserAction","payload","type","setErrorAction","initialState","todos","currentUserId","titleFilter","statusFilter","user","isError","store","createStore","state","action","getUser","userId","fetch","then","response","json","getTodosSelector","getUserIdSelector","getTitleFilterSelector","getStatusFilterSelector","getUserSelector","getErrorSelector","CurrentUser","props","dispatch","useDispatch","useSelector","useEffect","loadUserFromServer","a","userFromServer","handleClearUser","useCallback","className","id","name","email","phone","onClick","TodoList","loadTodosFromServer","todosFromServer","filter","todo","completed","title","includes","length","handleTitleChange","event","newTitle","target","value","handleUserChange","buttonUserId","handleStatusChange","newStatus","placeholder","onChange","map","htmlFor","checked","readOnly","classNames","button","App","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a528c3e0.chunk.js","sourcesContent":["export const LOAD_TODOS = 'LOAD_TODOS';\nexport const LOAD_USER = 'LOAD_USER';\nexport const SET_USER = 'SET_USER';\nexport const SET_TITLE_FILTER = 'SET_TITLE_FILTER';\nexport const SET_STATUS_FILTER = 'SET_STATUS_FILTER';\nexport const SET_ERROR = 'SET_ERROR';\n\nexport const loadTodosAction = (payload: Todo[]) => ({\n  type: LOAD_TODOS,\n  payload,\n});\n\nexport const loadUserAction = (payload: User) => ({\n  type: LOAD_USER,\n  payload,\n});\n\nexport const setUserAction = (payload: number) => ({\n  type: SET_USER,\n  payload,\n});\n\nexport const setTitleFilterAction = (payload: string) => ({\n  type: SET_TITLE_FILTER,\n  payload,\n});\n\nexport const setStatusFilterAction = (payload: string) => ({\n  type: SET_STATUS_FILTER,\n  payload,\n});\n\nexport const setErrorAction = (payload: boolean) => ({\n  type: SET_ERROR,\n  payload,\n});\n","import { createStore } from 'redux';\nimport {\n  LOAD_TODOS,\n  LOAD_USER,\n  SET_ERROR,\n  SET_STATUS_FILTER,\n  SET_TITLE_FILTER,\n  SET_USER,\n} from './actions';\n\nconst initialState: State = {\n  todos: [],\n  currentUserId: 0,\n  titleFilter: '',\n  statusFilter: 'all',\n  user: null,\n  isError: false,\n};\n\nconst reducer = (state = initialState, action: Action) => {\n  switch (action.type) {\n    case LOAD_TODOS:\n      return {\n        ...state,\n        todos: [...action.payload],\n      };\n    case SET_USER:\n      return {\n        ...state,\n        currentUserId: action.payload,\n      };\n    case SET_TITLE_FILTER:\n      return {\n        ...state,\n        titleFilter: action.payload,\n      };\n    case SET_STATUS_FILTER:\n      return {\n        ...state,\n        statusFilter: action.payload,\n      };\n    case LOAD_USER:\n      return {\n        ...state,\n        user: action.payload,\n      };\n    case SET_ERROR:\n      return {\n        ...state,\n        isError: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n\nexport const store = createStore(reducer);\n","const USER_API = 'https://mate.academy/students-api/users/';\n\nexport function getUser(userId: number): Promise<User> {\n  return fetch(`${USER_API}${userId}`)\n    .then(response => response.json());\n}\n","export const getTodosSelector = (state: State) => state.todos;\nexport const getUserIdSelector = (state: State) => state.currentUserId;\nexport const getTitleFilterSelector = (state: State) => state.titleFilter;\nexport const getStatusFilterSelector = (state: State) => state.statusFilter;\nexport const getUserSelector = (state: State) => state.user;\nexport const getErrorSelector = (state: State) => state.isError;\n","import React, { useCallback, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getUser } from '../../api/users';\nimport { loadUserAction, setErrorAction, setUserAction } from '../../store/actions';\nimport { getErrorSelector, getUserSelector } from '../../store/selectors';\n\ntype Props = {\n  userId: number,\n};\n\nexport const CurrentUser: React.FC<Props> = (props) => {\n  const dispatch = useDispatch();\n  const { userId } = props;\n  const user = useSelector(getUserSelector);\n  const isError = useSelector(getErrorSelector);\n\n  useEffect(() => {\n    const loadUserFromServer = async () => {\n      try {\n        const userFromServer = await getUser(userId);\n\n        dispatch(loadUserAction(userFromServer));\n        dispatch(setErrorAction(false));\n      } catch {\n        dispatch(setErrorAction(true));\n      }\n    };\n\n    loadUserFromServer();\n  }, [userId]);\n\n  const handleClearUser = useCallback(() => {\n    dispatch(setUserAction(0));\n  }, [userId]);\n\n  return (\n    <>\n      {!isError\n        ? (\n          <div className=\"CurrentUser\">\n            <h2 className=\"CurrentUser__title\"><span>{`Selected user: ${user?.id}`}</span></h2>\n\n            <h3 className=\"CurrentUser__name\">{user?.name}</h3>\n            <p className=\"CurrentUser__email\">{user?.email}</p>\n            <p className=\"CurrentUser__phone\">{user?.phone}</p>\n            <button\n              type=\"button\"\n              className=\"button\"\n              onClick={handleClearUser}\n            >\n              Clear User\n            </button>\n          </div>\n        )\n        : <p>User Not Found</p>}\n    </>\n  );\n};\n","import React, { useCallback, useEffect } from 'react';\nimport classNames from 'classnames';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getTodos } from '../../api/todos';\nimport {\n  loadTodosAction,\n  setStatusFilterAction,\n  setTitleFilterAction,\n  setUserAction,\n} from '../../store/actions';\nimport { getTodosSelector, getTitleFilterSelector, getStatusFilterSelector } from '../../store/selectors';\nimport './TodoList.scss';\n\ntype Props = {\n  userId: number,\n};\n\nexport const TodoList: React.FC<Props> = (props) => {\n  const dispatch = useDispatch();\n  const { userId } = props;\n  const todos = useSelector(getTodosSelector);\n  const titleFilter = useSelector(getTitleFilterSelector);\n  const statusFilter = useSelector(getStatusFilterSelector);\n\n  useEffect(() => {\n    const loadTodosFromServer = async () => {\n      let todosFromServer = await getTodos();\n\n      switch (statusFilter) {\n        case 'completed':\n          todosFromServer = todosFromServer.filter(todo => todo.completed === true);\n          break;\n        case 'not completed':\n          todosFromServer = todosFromServer.filter(todo => todo.completed === false);\n          break;\n        default:\n      }\n\n      dispatch(loadTodosAction(todosFromServer\n        .filter(todo => todo.title.includes(titleFilter))));\n    };\n\n    loadTodosFromServer();\n  }, [todos.length, titleFilter, statusFilter]);\n\n  const handleTitleChange = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\n    const newTitle = event.target.value;\n\n    dispatch(setTitleFilterAction(newTitle));\n  }, [titleFilter]);\n\n  const handleUserChange = useCallback((buttonUserId: number) => {\n    const newUser = buttonUserId;\n\n    dispatch(setUserAction(newUser));\n  }, [userId]);\n\n  const handleStatusChange = useCallback((event: React.ChangeEvent<HTMLSelectElement>) => {\n    const newStatus = event.target.value;\n\n    dispatch(setStatusFilterAction(newStatus));\n  }, [statusFilter]);\n\n  return (\n    <div className=\"TodoList\">\n      <input\n        type=\"text\"\n        placeholder=\"Title\"\n        className=\"TodoList__filter\"\n        value={titleFilter}\n        onChange={handleTitleChange}\n      />\n      <select\n        value={statusFilter}\n        onChange={handleStatusChange}\n      >\n        <option value=\"all\">Show all</option>\n        <option value=\"completed\">Show completed</option>\n        <option value=\"not completed\">Show not completed</option>\n      </select>\n      <h2>Todos:</h2>\n      <div className=\"TodoList__list-container\">\n        <ul className=\"TodoList__list\">\n          {todos.map(todo => (\n            <li\n              className={`TodoList__item TodoList__item--${todo.completed ? 'checked' : 'unchecked'}`}\n              key={todo.id}\n            >\n              <label htmlFor={`${todo.id}`}>\n                <input type=\"checkbox\" id={`${todo.id}`} checked={todo.completed} readOnly />\n                <p>{todo.title}</p>\n              </label>\n              <button\n                onClick={() => handleUserChange(todo.userId)}\n                className={\n                  classNames(\n                    'TodoList__user-button',\n                    { button: todo.userId !== userId },\n                    { 'TodoList__user-button--selected': todo.userId === userId },\n                  )\n                }\n                type=\"button\"\n              >\n                {`User ${todo.userId}`}\n              </button>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n","const TODO_API = 'https://mate.academy/students-api/todos';\n\nexport function getTodos(): Promise<Todo[]> {\n  return fetch(TODO_API)\n    .then(response => response.json());\n}\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport './App.scss';\nimport { CurrentUser } from './components/CurrentUser/CurrentUser';\nimport { TodoList } from './components/TodoList/TodoList';\nimport { getUserIdSelector } from './store/selectors';\nimport './styles/general.scss';\n\nconst App: React.FC = () => {\n  const userId = useSelector(getUserIdSelector);\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        <TodoList userId={userId} />\n      </div>\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          {userId\n            ? <CurrentUser userId={userId} />\n            : 'No user selected'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport { store } from './store';\nimport App from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root: React.FC = () => (\n  <Provider store={store}>\n    <App />\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}